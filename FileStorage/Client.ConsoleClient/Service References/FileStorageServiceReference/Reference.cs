//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.WCFServiceConsoleClient.FileStorageServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileStorageServiceReference.IFileStorageService")]
    public interface IFileStorageService {
        
        // CODEGEN: Generating message contract since the operation UploadFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/UploadFile", ReplyAction="http://tempuri.org/IFileStorageService/UploadFileResponse")]
        Client.WCFServiceConsoleClient.FileStorageServiceReference.UploadFileResponse UploadFile(Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/UploadFile", ReplyAction="http://tempuri.org/IFileStorageService/UploadFileResponse")]
        System.Threading.Tasks.Task<Client.WCFServiceConsoleClient.FileStorageServiceReference.UploadFileResponse> UploadFileAsync(Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage request);
        
        // CODEGEN: Generating message contract since the wrapper name (RemoteFileStreamRequest) of message RemoteFileStreamRequest does not match the default value (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/DownloadFile", ReplyAction="http://tempuri.org/IFileStorageService/DownloadFileResponse")]
        Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage DownloadFile(Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/DownloadFile", ReplyAction="http://tempuri.org/IFileStorageService/DownloadFileResponse")]
        System.Threading.Tasks.Task<Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage> DownloadFileAsync(Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileStreamMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileStreamMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public System.Guid fileId;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string fileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long streamLength;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream data;
        
        public RemoteFileStreamMessage() {
        }
        
        public RemoteFileStreamMessage(System.Guid fileId, string fileName, long streamLength, System.IO.Stream data) {
            this.fileId = fileId;
            this.fileName = fileName;
            this.streamLength = streamLength;
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileStreamRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileStreamRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public System.Guid fileId;
        
        public RemoteFileStreamRequest() {
        }
        
        public RemoteFileStreamRequest(System.Guid fileId) {
            this.fileId = fileId;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileStorageServiceChannel : Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileStorageServiceClient : System.ServiceModel.ClientBase<Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService>, Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService {
        
        public FileStorageServiceClient() {
        }
        
        public FileStorageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileStorageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileStorageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileStorageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.WCFServiceConsoleClient.FileStorageServiceReference.UploadFileResponse Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService.UploadFile(Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(System.Guid fileId, string fileName, long streamLength, System.IO.Stream data) {
            Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage inValue = new Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage();
            inValue.fileId = fileId;
            inValue.fileName = fileName;
            inValue.streamLength = streamLength;
            inValue.data = data;
            Client.WCFServiceConsoleClient.FileStorageServiceReference.UploadFileResponse retVal = ((Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.WCFServiceConsoleClient.FileStorageServiceReference.UploadFileResponse> Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService.UploadFileAsync(Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.WCFServiceConsoleClient.FileStorageServiceReference.UploadFileResponse> UploadFileAsync(System.Guid fileId, string fileName, long streamLength, System.IO.Stream data) {
            Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage inValue = new Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage();
            inValue.fileId = fileId;
            inValue.fileName = fileName;
            inValue.streamLength = streamLength;
            inValue.data = data;
            return ((Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService)(this)).UploadFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService.DownloadFile(Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public string DownloadFile(ref System.Guid fileId, out long streamLength, out System.IO.Stream data) {
            Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamRequest inValue = new Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamRequest();
            inValue.fileId = fileId;
            Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage retVal = ((Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService)(this)).DownloadFile(inValue);
            fileId = retVal.fileId;
            streamLength = retVal.streamLength;
            data = retVal.data;
            return retVal.fileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage> Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService.DownloadFileAsync(Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamRequest request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamMessage> DownloadFileAsync(System.Guid fileId) {
            Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamRequest inValue = new Client.WCFServiceConsoleClient.FileStorageServiceReference.RemoteFileStreamRequest();
            inValue.fileId = fileId;
            return ((Client.WCFServiceConsoleClient.FileStorageServiceReference.IFileStorageService)(this)).DownloadFileAsync(inValue);
        }
    }
}
