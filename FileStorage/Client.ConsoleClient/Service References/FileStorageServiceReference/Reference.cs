//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ConsoleClient.FileStorageServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileStorageServiceReference.IFileStorageService")]
    public interface IFileStorageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/UploadFile", ReplyAction="http://tempuri.org/IFileStorageService/UploadFileResponse")]
        void UploadFile(System.IO.Stream fileData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/UploadFile", ReplyAction="http://tempuri.org/IFileStorageService/UploadFileResponse")]
        System.Threading.Tasks.Task UploadFileAsync(System.IO.Stream fileData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/GetFile", ReplyAction="http://tempuri.org/IFileStorageService/GetFileResponse")]
        System.IO.Stream GetFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/GetFile", ReplyAction="http://tempuri.org/IFileStorageService/GetFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetFileAsync();
        
        // CODEGEN: Generating message contract since the operation UploadFileEnvelope is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/UploadFileEnvelope", ReplyAction="http://tempuri.org/IFileStorageService/UploadFileEnvelopeResponse")]
        Client.ConsoleClient.FileStorageServiceReference.UploadFileEnvelopeResponse UploadFileEnvelope(Client.ConsoleClient.FileStorageServiceReference.UploadStreamMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStorageService/UploadFileEnvelope", ReplyAction="http://tempuri.org/IFileStorageService/UploadFileEnvelopeResponse")]
        System.Threading.Tasks.Task<Client.ConsoleClient.FileStorageServiceReference.UploadFileEnvelopeResponse> UploadFileEnvelopeAsync(Client.ConsoleClient.FileStorageServiceReference.UploadStreamMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadStreamMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadStreamMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long streamLength;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string streamName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream data;
        
        public UploadStreamMessage() {
        }
        
        public UploadStreamMessage(long streamLength, string streamName, System.IO.Stream data) {
            this.streamLength = streamLength;
            this.streamName = streamName;
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileEnvelopeResponse {
        
        public UploadFileEnvelopeResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileStorageServiceChannel : Client.ConsoleClient.FileStorageServiceReference.IFileStorageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileStorageServiceClient : System.ServiceModel.ClientBase<Client.ConsoleClient.FileStorageServiceReference.IFileStorageService>, Client.ConsoleClient.FileStorageServiceReference.IFileStorageService {
        
        public FileStorageServiceClient() {
        }
        
        public FileStorageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileStorageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileStorageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileStorageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UploadFile(System.IO.Stream fileData) {
            base.Channel.UploadFile(fileData);
        }
        
        public System.Threading.Tasks.Task UploadFileAsync(System.IO.Stream fileData) {
            return base.Channel.UploadFileAsync(fileData);
        }
        
        public System.IO.Stream GetFile() {
            return base.Channel.GetFile();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetFileAsync() {
            return base.Channel.GetFileAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ConsoleClient.FileStorageServiceReference.UploadFileEnvelopeResponse Client.ConsoleClient.FileStorageServiceReference.IFileStorageService.UploadFileEnvelope(Client.ConsoleClient.FileStorageServiceReference.UploadStreamMessage request) {
            return base.Channel.UploadFileEnvelope(request);
        }
        
        public void UploadFileEnvelope(long streamLength, string streamName, System.IO.Stream data) {
            Client.ConsoleClient.FileStorageServiceReference.UploadStreamMessage inValue = new Client.ConsoleClient.FileStorageServiceReference.UploadStreamMessage();
            inValue.streamLength = streamLength;
            inValue.streamName = streamName;
            inValue.data = data;
            Client.ConsoleClient.FileStorageServiceReference.UploadFileEnvelopeResponse retVal = ((Client.ConsoleClient.FileStorageServiceReference.IFileStorageService)(this)).UploadFileEnvelope(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ConsoleClient.FileStorageServiceReference.UploadFileEnvelopeResponse> Client.ConsoleClient.FileStorageServiceReference.IFileStorageService.UploadFileEnvelopeAsync(Client.ConsoleClient.FileStorageServiceReference.UploadStreamMessage request) {
            return base.Channel.UploadFileEnvelopeAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ConsoleClient.FileStorageServiceReference.UploadFileEnvelopeResponse> UploadFileEnvelopeAsync(long streamLength, string streamName, System.IO.Stream data) {
            Client.ConsoleClient.FileStorageServiceReference.UploadStreamMessage inValue = new Client.ConsoleClient.FileStorageServiceReference.UploadStreamMessage();
            inValue.streamLength = streamLength;
            inValue.streamName = streamName;
            inValue.data = data;
            return ((Client.ConsoleClient.FileStorageServiceReference.IFileStorageService)(this)).UploadFileEnvelopeAsync(inValue);
        }
    }
}
